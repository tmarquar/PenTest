#$url = 'https://pen-box.tech/computer_information/create.php? Token=';
#$payload = @{
#	business_id = '23';
	# machine_id = '0';
	# os = '245';
	# os_sn = '2345';
	# user = 'person';
	# uptime = '345';
	# manufacturer = 'something';
	# model = 'asdfj';
	# serial_number = '2345';
	# firewall = '0';
	# drive_size = '345';
	# drive_free_space = '34';
	# ram = '34';
	# processor = '345';
	# cd_drive = '35';
	# graphics = '3567654';
# };
# $the_json = $payload | ConvertTo-Json;
# Invoke-RestMethod -Method PUT -Uri $url -Body $the_json
$business_id = 1000
$machine_id = 1000
# $url = 'https://pen-box.tech/installed_programs/create.php? Token=';

# $i = 0
# $payloadInfo = Get-WmiObject -class Win32_Product | Select Name,Version,InstallDate

# do {
# $payloadInfo[$i].Name;
	# $payloadPrograms = @{
		# business_id = $business_id;
		# machine_id = $machine_id;
		# name = $payloadInfo[$i].Name;
		# version = $payloadInfo[$i].Version;
		# install_date = $payloadInfo[$i].InstallDate;
	# };
	# $the_json = $payloadPrograms | ConvertTo-Json;
	# Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;
	# $i ++
	 
# }while ($i -lt $payloadInfo.Count)


# $url = 'https://pen-box.tech/usb_devices/create.php? Token=4YvQb4ua3yT4nDyLJU5Nlm6x6LtXS6x9sCEcCCrmBFaXVnNE3M6SrueMPD6gMzeEG5bD7D0Uadopcg2WCAQPe3v5GMfCmFhdPJN7oWA8yn89jTApc1SYQ6dKiK9zLO0KbfIwwIKab3DfZFcwj3XYdl2OCZ1X2OvoLdaj40CM74G6LllxVWUWyOppNqYqiOwGcTsTeyCM5zDu2FGTPwAVLuPRzYwLUGpEJoPelE4IVofUTCy8CEl9HAhIfOlV1aWK';

# $allUsb = @(get-wmiobject win32_volume | select Name, Label, FreeSpace)
# $Report =  $Report + '<div id=right><h3>USB Devices</h3><table>'

# # more usb in loop
# $u = 0
# do {
# $gbUSB = [math]::truncate($allUsb[$u].FreeSpace / 1GB)
# #$Report = $Report + "<tr><td>Drive Name: </td><td> " + $allUsb[$u].Name + $allUsb[$u].Label + "</td><td>Free Space: </td><td>" + $gbUSB + "GB</td></tr>"

# $payloadUSB = @{
		# business_id = $business_id;
		# machine_id = $machine_id;
		# drive_name = $allUsb[$u].Name + $allUsb[$u].Label;
		# free_space = $gbUSB;
	# };
	# $the_json = $payloadUSB | ConvertTo-Json;
	# Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;

# Write-Output $fullUSB
# $u ++
# } while ($u -lt $allUsb.Count)

# $url = 'https://pen-box.tech/installed_updates/create.php? Token=';


# $payloadInfo = Get-WmiObject Win32_QuickFixEngineering -ComputerName $env:COMPUTERNAME | sort-object -property installedon -Descending | Select  Description, HotFixId,Installedon,InstalledBy

# $i = 0

# do {
	# $payloadUpdates = @{
		# business_id = $business_id;
		# machine_id = $machine_id;
		# description = $payloadInfo[$i].Description;
		# hf_id = $payloadinfo[$i].HotFixId;
		# installed_on = [string]$payloadInfo[$i].Installedon;
		# installed_by = $payloadInfo[$i].InstalledBy;
	# };
	# #$payloadInfo[$i].InstalledBy;
	# $the_json = $payloadUpdates | ConvertTo-Json;
	# Invoke-RestMethod -Method PUT -Uri $url -Body $the_json;
	# $i ++
	 
# }while ($i -lt $payloadInfo.Count)




$Computer = $env:COMPUTERNAME
$PortList = 0, 21, 22, 23, 25, 79, 80, 110, 113, 119, 135, 137, 139, 143, 389, 443, 445, 1002, 1024, 1030, 1720, 1900, 5000, 8080
$Report = $Report  + '<div id=right><h3>Port Scan of ' + $Computer + '</h3><table>'
foreach ($PortNumber in $PortList) {
$PortCheck = New-Object Net.Sockets.TcpClient
$PortCheck.Connect($Computer, $PortNumber)
if ($PortCheck.Connected) {
$Report = $Report  +  '<tr><td><b><font color=red>Port ' + $PortNumber + ' is open</font></b></td></tr>'}
else {$Report = $Report  +  '<tr><td>Port ' + $PortNumber + ' is closed</td></tr>'}}
$Report = $Report + '</table></div>'
$Report =  $Report + '<div id=left><h3>Shared Drives/Devices</h3>'
$Report =  $Report + (GET-WMIOBJECT Win32_Share | convertto-html Name, Description, Path)
$Report = $Report + '</div>'